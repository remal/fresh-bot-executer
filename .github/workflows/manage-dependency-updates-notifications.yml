name: Manage dependency updates notifications

on:
  schedule:
  - cron: '11 * * * *'
  push:
    branches:
    - main
    paths:
    - '.github/workflows/manage-dependency-updates-notifications.yml'
  workflow_dispatch: { }

jobs:
  manage-dependency-updates-notifications:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
    - name: Manage dependency updates notifications
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.NOTIFICATIONS_TOKEN }}
        script: |
          const notifications = await github.paginate(
            github.rest.activity.listNotificationsForAuthenticatedUser.endpoint.merge({})
          )
          for (const notification of notifications) {
            if (notification.subject == null || notification.subject.type !== 'PullRequest') continue;
            if (notification.repository == null) continue;
            
            if (notification.reason !== 'assign') {
              console.log(JSON.stringify(notification, null, 2))
              continue;
            }
            console.log(JSON.stringify(notification, null, 2))

            const repositoryUrl = notification.repository.url
            let pullRequestId = notification.subject.url
            if (pullRequestId.startsWith(repositoryUrl)) {
              pullRequestId = pullRequestId.substring(repositoryUrl.length)
            }
            if (pullRequestId.startsWith('/pulls/')) {
              pullRequestId = pullRequestId.substring('/pulls/'.length)
            }
            
            const pullRequest = await github.rest.pulls.get({
              owner: notification.repository.owner.login,
              repo: notification.repository.name,
              pull_number: pullRequestId,
            }).then(it => it.data)
            
            if (pullRequest.user.login === 'renovate[bot]'
              || pullRequest.user.login === 'dependabot[bot]'
            ) {
              const canNotificationBeDeleted = (pullRequest.merged)
              if (canNotificationBeDeleted) {
                console.log("Marking thread as read: " + notification.subject.title + " (" + notification.id + ")")
                await github.rest.activity.markThreadAsRead({
                  thread_id: notification.id,
                }
              }
            }

            console.log(JSON.stringify(pullRequest, null, 2))
          })
