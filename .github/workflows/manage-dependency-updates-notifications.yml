name: Manage dependency updates notifications

on:
  schedule:
  - cron: '0/15 * * * *'
  push:
    branches:
    - main
    paths:
    - '.github/workflows/manage-dependency-updates-notifications.yml'
  workflow_dispatch: { }

jobs:
  manage-dependency-updates-notifications:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: manage-dependency-updates-notifications
      cancel-in-progress: true
    steps:
    - name: Manage dependency updates notifications
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.NOTIFICATIONS_TOKEN }}
        script: |
          if (github.rest.activity.markThreadAsDone == null) {
            console.log("::warning::Registering `activity.markThreadAsDone`")
            Object.assign(github.rest.activity, {
              markThreadAsDone: github.request.defaults({
                method: "DELETE",
                url: "/notifications/threads/{thread_id}",
                params: {
                  thread_id: {
                    required: true,
                    type: "string",
                  },
                },
              }),
            })
          }

          const notifications = await github.paginate(github.rest.activity.listNotificationsForAuthenticatedUser, {
            all: true,
          })
          for (const notification of notifications) {
            if (notification.subject == null || notification.subject.type !== 'PullRequest') continue;
            //console.log(JSON.stringify(notification))
            if (notification.repository == null) continue;

            if (notification.reason !== 'assign'
              && notification.reason !== 'subscribed'
              && notification.reason !== 'review_requested'
            ) {
              //console.log(JSON.stringify(notification, null, 2))
              continue;
            }

            const repositoryUrl = notification.repository.url
            let pullRequestId = notification.subject.url
            if (pullRequestId.startsWith(repositoryUrl)) {
              pullRequestId = pullRequestId.substring(repositoryUrl.length)
            }
            if (pullRequestId.startsWith('/pulls/')) {
              pullRequestId = pullRequestId.substring('/pulls/'.length)
            }

            const pullRequest = await github.rest.pulls.get({
              owner: notification.repository.owner.login,
              repo: notification.repository.name,
              pull_number: pullRequestId,
            }).then(it => it.data)
            console.log("::group::Pull Request '" + notification.subject.title + "' (" + notification.id + ")")

            if (pullRequest.user.login === 'renovate[bot]'
              || pullRequest.user.login === 'dependabot[bot]'
            ) {
              let canNotificationBeDeleted = false
              if (!canNotificationBeDeleted) {
                if (pullRequest.closed_at != null) {
                  canNotificationBeDeleted = true
                  console.log("Pull Request is closed")
                } else if (pullRequest.merged_at != null) {
                  canNotificationBeDeleted = true
                  console.log("Pull Request is merged")
                }
              }

              if (pullRequest.merged) {
                console.log("Marking thread as done")
                await github.rest.activity.markThreadAsDone({
                  thread_id: notification.id,
                })
              }
            }
            console.log("::endgroup::")
          }
