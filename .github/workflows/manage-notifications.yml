name: Manage notifications

on:
  schedule:
  - cron: '0/15 * * * *'
  push:
    branches:
    - main
    paths:
    - '.github/workflows/manage-notifications.yml'
  workflow_dispatch: { }

jobs:
  manage-notifications:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: manage-notifications
      cancel-in-progress: true
    steps:
    - name: Get rate limits
      uses: remal-github-actions/get-rate-limits@v1
      id: rate-limits
      with:
        githubToken: ${{env.NOTIFICATIONS_TOKEN || github.token}}
    - name: Make rate limits decision
      id: decision
      run: |
        echo "Core rate limit usage: ${{steps.rate-limits.outputs.coreUsage}}"
        if [ "${{steps.rate-limits.outputs.coreUsage < 50}}" == "true" ]; then
          echo "Enough rate limits"
          echo 'enough=true' >> $GITHUB_OUTPUT
        else
          echo "::warning::Not enough rate limits!"
          if [ "${{github.event_name != 'schedule'}}" == "true" ]; then
            echo "::warning::Executing anyway, as event is '${{github.event_name}}'"
            echo 'enough=true' >> $GITHUB_OUTPUT
          else
            echo 'enough=false' >> $GITHUB_OUTPUT
          fi
        fi

    - name: Manage notifications
      if: ${{fromJSON(steps.decision.outputs.enough) == true}}
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.NOTIFICATIONS_TOKEN }}
        script: |
          if (github.rest.activity.markThreadAsDone == null) {
            console.log("::warning::Registering `activity.markThreadAsDone`")
            Object.assign(github.rest.activity, {
              markThreadAsDone: github.request.defaults({
                method: "DELETE",
                url: "/notifications/threads/{thread_id}",
                params: {
                  thread_id: {
                    required: true,
                    type: "string",
                  },
                },
              }),
            })
          }

          const nowMillis = new Date().getTime()
          const sinceMillis = nowMillis - (3 * 24 * 3600 * 1000)
          const notifications = await github.paginate(github.rest.activity.listNotificationsForAuthenticatedUser, {
            all: true,
            since: new Date(sinceMillis).toISOString(),
          })
          for (const notification of notifications) {
            const notificationToLog = { ...notification }
            if (notificationToLog.repository) {
              notificationToLog.repository = {
                full_name: notification.repository.full_name,
                html_url: notification.repository.html_url,
              }
            }
            //console.log(JSON.stringify(notificationToLog, null, 2))
          }

          for (const notification of notifications) {
            if (notification.subject?.type !== 'CheckSuite') continue;
            const title = notification.subject?.title ?? ''

            let notificationDeletionReason = null
            if (title.match(/ workflow run(, Attempt #\d+)? cancelled for .* branch$/)) {
              notificationDeletionReason = 'cancelled'
            }

            if (notificationDeletionReason != null) {
              console.log("::group::" + title)
              console.log("Marking thread as done, reason: " + notificationDeletionReason)
              await github.rest.activity.markThreadAsDone({
                thread_id: notification.id,
              })
              console.log("::endgroup::")
            }
          }

          for (const notification of notifications) {
            if (notification.subject?.type !== 'PullRequest') continue
            if (notification.repository == null) continue

            if (notification.reason !== 'assign'
              && notification.reason !== 'subscribed'
              && notification.reason !== 'review_requested'
              && notification.reason !== 'author'
            ) {
              //console.log(JSON.stringify(notification, null, 2))
              continue;
            }

            const repositoryUrl = notification.repository.url
            let pullRequestId = notification.subject.url
            if (pullRequestId.startsWith(repositoryUrl)) {
              pullRequestId = pullRequestId.substring(repositoryUrl.length)
            }
            if (pullRequestId.startsWith('/pulls/')) {
              pullRequestId = pullRequestId.substring('/pulls/'.length)
            }

            const pullRequest = await github.rest.pulls.get({
              owner: notification.repository.owner.login,
              repo: notification.repository.name,
              pull_number: pullRequestId,
            }).then(it => it.data)
            console.log("::group::Pull Request '" + notification.subject.title + "' (" + notification.id + ")")

            if (pullRequest.user.login.endsWith('[bot]')
              || pullRequest.labels.some(label => label.name === 'sync-with-template')
            ) {
              let canNotificationBeDeleted = false
              if (!canNotificationBeDeleted) {
                if (pullRequest.merged_at != null) {
                  canNotificationBeDeleted = true
                  console.log("Pull Request is merged")
                } else if (pullRequest.closed_at != null) {
                  canNotificationBeDeleted = true
                  console.log("Pull Request is closed")
                }
              }

              if (canNotificationBeDeleted) {
                console.log("Marking thread as done")
                await github.rest.activity.markThreadAsDone({
                  thread_id: notification.id,
                })

              } else {
                console.log("PR may require attention")
              }
            } else {
                console.log("Not an automatic PR")
            }
            console.log("::endgroup::")
          }
